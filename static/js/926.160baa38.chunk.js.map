{"version":3,"file":"static/js/926.160baa38.chunk.js","mappings":"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","sources":["redux/selectors.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/ContactsPage/ContactsPage.jsx","pages/Contacts.js","../node_modules/@chakra-ui/layout/src/box.tsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n","import styled from 'styled-components';\n\nexport const WrapperStyled = styled.div`\n  padding: 15px;\n  width: 350px;\n  border: 2px solid black;\n`;\n\nexport const FormStyled = styled.form`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const LabelStyled = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  font-weight: 500;\n  font-size: 17px;\n  &.label:not(:last-child) {\n    margin-bottom: 20px;\n  }\n`;\nexport const InputStyled = styled.input`\n  padding: 2px;\n  width: 170px;\n`;\n\nexport const ButtonStyled = styled.button`\n  margin-top: 20px;\n  padding: 2px;\n  width: 100px;\n  cursor: pointer;\n`;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { addContact } from 'redux/operations';\nimport { selectContacts } from 'redux/selectors';\n\nimport {\n  ButtonStyled,\n  FormStyled,\n  InputStyled,\n  LabelStyled,\n} from './ContactForm.styled';\nimport { Box } from '@chakra-ui/react';\n\nexport function ContactForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleInputChange = e => {\n    switch (e.currentTarget.name) {\n      case 'name':\n        setName(e.currentTarget.value);\n        break;\n\n      case 'number':\n        setNumber(e.currentTarget.value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    createContact(name, number);\n    setName('');\n    setNumber('');\n  };\n\n  const createContact = (name, number) => {\n    if (!contacts.find(el => el.name === name)) {\n      const newContact = {\n        name,\n        number,\n      };\n      dispatch(addContact(newContact));\n    } else {\n      alert(`${name} is already in contacts.`);\n    }\n  };\n\n  return (\n    <Box\n      padding=\"15px\"\n      width=\"350px\"\n      border=\"2px solid black\"\n      borderRadius={'10px'}\n    >\n      <FormStyled onSubmit={handleSubmit}>\n        <LabelStyled>\n          Name\n          <InputStyled\n            type=\"text\"\n            name=\"name\"\n            required\n            value={name}\n            onChange={handleInputChange}\n          />\n        </LabelStyled>\n        <LabelStyled>\n          Number\n          <InputStyled\n            type=\"tel\"\n            name=\"number\"\n            required\n            value={number}\n            onChange={handleInputChange}\n          />\n        </LabelStyled>\n        <ButtonStyled type=\"submit\">Add contact</ButtonStyled>\n      </FormStyled>\n    </Box>\n  );\n}\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport PropTypes from 'prop-types';\n\nimport { deleteContact } from 'redux/operations';\n\nimport styled from 'styled-components';\n\nfunction ContactItem({ name, number, contactId }) {\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <ItemStyled>\n        <p>\n          {name}: {number}\n        </p>\n        <ButtonStyled\n          type=\"button\"\n          onClick={() => dispatch(deleteContact(contactId))}\n        >\n          delete\n        </ButtonStyled>\n      </ItemStyled>\n    </>\n  );\n}\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  contactId: PropTypes.string.isRequired,\n};\n\nexport default ContactItem;\n\nconst ItemStyled = styled.li`\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  margin-bottom: 10px;\n  font-weight: 500;\n  font-size: 17px;\n  & p {\n    margin: 0;\n  }\n`;\n\nconst ButtonStyled = styled.button`\n  margin-right: 0;\n  margin-left: auto;\n  font-size: 12px;\n  cursor: pointer;\n`;\n","import React from 'react';\n\nimport ContactItem from './ContactItem/ContactItem';\nimport { useSelector } from 'react-redux';\nimport { selectContacts, selectFilter } from 'redux/selectors';\n\nimport styled from 'styled-components';\n\nfunction ContactList() {\n  const filter = useSelector(selectFilter);\n  const contacts = useSelector(selectContacts);\n\n  const filteredContacts = () => {\n    const normalizedFilter = filter.toLocaleLowerCase();\n\n    return contacts.filter(e =>\n      e.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  return (\n    <div>\n      <ListStyled>\n        {filteredContacts().map(({ id, name, number }) => {\n          return (\n            <ContactItem key={id} contactId={id} name={name} number={number} />\n          );\n        })}\n      </ListStyled>\n    </div>\n  );\n}\n\nexport default ContactList;\n\nconst ListStyled = styled.ul`\n  padding-left: 0;\n  list-style: none;\n`;\n","import React from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateFilter } from 'redux/filterSlice';\nimport { selectFilter } from 'redux/selectors';\n\nimport styled from 'styled-components';\n\nfunction Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const handleFilterChange = e => {\n    dispatch(updateFilter(e.currentTarget.value));\n  };\n\n  return (\n    <div>\n      <LabelStyled>\n        Find contacts by name\n        <InputStyled\n          type=\"text\"\n          name=\"filter\"\n          value={filter}\n          onChange={handleFilterChange}\n        />\n      </LabelStyled>\n    </div>\n  );\n}\n\nexport default Filter;\n\nconst LabelStyled = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 7px;\n  font-weight: 500;\n  font-size: 17px;\n`;\n\nconst InputStyled = styled.input`\n  padding: 2px;\n  width: 170px;\n`;\n","import React from 'react';\n\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport { fetchContacts } from 'redux/operations';\nimport { selectError, selectIsLoading } from 'redux/selectors';\n\nimport { Box } from '@chakra-ui/react';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Box>\n        <Filter />\n        {!error && isLoading && <b>Loading...</b>}\n      </Box>\n      {error ? <b>{error}</b> : <ContactList />}\n    </div>\n  );\n}\n","import { Box } from '@chakra-ui/react';\nimport ContactsPage from 'components/ContactsPage/ContactsPage';\nimport React from 'react';\n\nexport default function Contacts() {\n  return (\n    <Box\n      position={'absolute'}\n      top={'10px'}\n      padding={'20px'}\n      borderRadius={'10px'}\n      backgroundColor={'white'}\n    >\n      <ContactsPage />\n    </Box>\n  );\n}\n","import {\n  chakra,\n  forwardRef,\n  SystemStyleObject,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface BoxProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * Box is the most abstract component on top of which other chakra\n * components are built. It renders a `div` element by default.\n *\n * @see Docs https://chakra-ui.com/box\n */\nexport const Box = chakra(\"div\")\n\nBox.displayName = \"Box\"\n\n/**\n * As a constraint, you can't pass size related props\n * Only `size` would be allowed\n */\ntype Omitted = \"size\" | \"boxSize\" | \"width\" | \"height\" | \"w\" | \"h\"\n\nexport interface SquareProps extends Omit<BoxProps, Omitted> {\n  /**\n   * The size (width and height) of the square\n   */\n  size?: BoxProps[\"width\"]\n  /**\n   * If `true`, the content will be centered in the square\n   *\n   * @default false\n   */\n  centerContent?: boolean\n}\n\nexport const Square = forwardRef<SquareProps, \"div\">(function Square(\n  props,\n  ref,\n) {\n  const { size, centerContent = true, ...rest } = props\n\n  const styles: SystemStyleObject = centerContent\n    ? { display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }\n    : {}\n\n  return (\n    <Box\n      ref={ref}\n      boxSize={size}\n      __css={{\n        ...styles,\n        flexShrink: 0,\n        flexGrow: 0,\n      }}\n      {...rest}\n    />\n  )\n})\n\nSquare.displayName = \"Square\"\n\nexport const Circle = forwardRef<SquareProps, \"div\">(function Circle(\n  props,\n  ref,\n) {\n  const { size, ...rest } = props\n  return <Square size={size} ref={ref} borderRadius=\"9999px\" {...rest} />\n})\n\nCircle.displayName = \"Circle\"\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","FormStyled","styled","LabelStyled","InputStyled","ButtonStyled","ContactForm","dispatch","useDispatch","useSelector","useState","name","setName","number","setNumber","handleInputChange","e","currentTarget","value","createContact","find","el","alert","newContact","addContact","padding","width","border","borderRadius","onSubmit","preventDefault","type","required","onChange","contactId","ItemStyled","onClick","deleteContact","ListStyled","normalizedFilter","toLocaleLowerCase","toLowerCase","includes","filteredContacts","map","id","updateFilter","ContactsPage","useEffect","fetchContacts","Contacts","position","top","backgroundColor","displayName","chakra","Square","props","forwardRef","size","centerContent","rest","styles","display","alignItems","justifyContent","boxSize","__css","Box","flexShrink","flexGrow","Circle"],"sourceRoot":""}